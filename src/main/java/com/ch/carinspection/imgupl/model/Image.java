package com.ch.carinspection.imgupl.model;

import jakarta.persistence.*;
import java.time.Instant;

/**
 * Entity representing an image uploaded for car inspection.
 *
 * Maps to the database table {@code car_inspection_images}.
 * Contains metadata about the uploaded image, such as its name,
 * URL, size, content type, upload timestamp, and scan status.
 */
@Entity
@Table(name = "car_inspection_images")
public class Image {

    /**
     * Primary key identifier for the image record.
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The original or assigned name of the image file.
     */
    @Column(name = "image_name", nullable = false)
    private String imageName;

    /**
     * The public URL location where the image is stored (e.g., AWS S3 URL).
     */
    @Column(name = "image_url", nullable = false)
    private String imageUrl;

    /**
     * Size of the image file in megabytes (MB).
     */
    @Column(name = "size_mb")
    private Double sizeMb;

    /**
     * Timestamp indicating when the image was uploaded.
     */
    @Column(nullable = false)
    private Instant timestamp;

    /**
     * MIME content type of the image (e.g., "image/png").
     */
    @Column(name = "content_type")
    private String contentType;

    /**
     * Approximate number of network calls made during upload.
     */
    @Column(name = "approx_network_calls")
    private Integer approxNetworkCalls;

    /**
     * Approximate IOPS (Input/Output Operations Per Second) measured during upload.
     */
    @Column(name = "approx_iops")
    private Double approxIops;

    /**
     * Scan status indicating the result of malware scanning on this image.
     */
    @Enumerated(EnumType.STRING)
    @Column(name = "scan_status", nullable = false)
    private ScanStatus scanStatus;

    /**
     * Default constructor initializing the scan status to {@link ScanStatus#PENDING}.
     */
    public Image() {
        this.scanStatus = ScanStatus.PENDING;
    }

    // --- Getters and Setters ---

    /** @return the unique identifier of this image */
    public Long getId() {
        return id;
    }

    /** @param id the unique identifier to set */
    public void setId(Long id) {
        this.id = id;
    }

    /** @return the name of the image file */
    public String getImageName() {
        return imageName;
    }

    /** @param imageName the name of the image file to set */
    public void setImageName(String imageName) {
        this.imageName = imageName;
    }

    /** @return the URL where the image is stored */
    public String getImageUrl() {
        return imageUrl;
    }

    /** @param imageUrl the URL to set for the image */
    public void setImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
    }

    /** @return the size of the image in megabytes */
    public Double getSizeMb() {
        return sizeMb;
    }

    /** @param sizeMb the size in megabytes to set */
    public void setSizeMb(Double sizeMb) {
        this.sizeMb = sizeMb;
    }

    /** @return the timestamp when the image was uploaded */
    public Instant getTimestamp() {
        return timestamp;
    }

    /** @param timestamp the upload timestamp to set */
    public void setTimestamp(Instant timestamp) {
        this.timestamp = timestamp;
    }

    /** @return the content type (MIME type) of the image */
    public String getContentType() {
        return contentType;
    }

    /** @param contentType the content type to set */
    public void setContentType(String contentType) {
        this.contentType = contentType;
    }

    /** @return approximate network calls made during upload */
    public Integer getApproxNetworkCalls() {
        return approxNetworkCalls;
    }

    /** @param approxNetworkCalls approximate network calls to set */
    public void setApproxNetworkCalls(Integer approxNetworkCalls) {
        this.approxNetworkCalls = approxNetworkCalls;
    }

    /** @return approximate IOPS during upload */
    public Double getApproxIops() {
        return approxIops;
    }

    /** @param approxIops approximate IOPS to set */
    public void setApproxIops(Double approxIops) {
        this.approxIops = approxIops;
    }

    /** @return current scan status of the image */
    public ScanStatus getScanStatus() {
        return scanStatus;
    }

    /** @param scanStatus scan status to set */
    public void setScanStatus(ScanStatus scanStatus) {
        this.scanStatus = scanStatus;
    }
}
